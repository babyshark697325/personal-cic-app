"use client";

import { useState, useRef, useEffect } from 'react';
import { format, addDays, isToday, isTomorrow } from 'date-fns';
import { useAppContext } from '@/context/AppContext';
import { Task, Project, Reminder, Goal } from '@/types';
type Priority = 'low' | 'medium' | 'high';
import Link from 'next/link';

// Date utilities
const formatDate = (date: Date | string) => {
  if (!date) return '';
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  if (isToday(dateObj)) return 'Today';
  if (isTomorrow(dateObj)) return 'Tomorrow';
  return format(dateObj, 'MMM d');
};

const StatCard = ({ title, value, icon, color }: { title: string; value: number; icon: React.ReactNode; color: string }) => (
  <div className="bg-white rounded-lg shadow p-6 flex items-center">
    <div className={`p-3 rounded-full ${color} text-white mr-4`}>
      {icon}
    </div>
    <div>
      <p className="text-gray-500 text-sm">{title}</p>
      <p className="text-2xl font-bold">{value}</p>
    </div>
  </div>
);

const TaskItem = ({ task }: { task: Task }) => {
  const { updateTask } = useAppContext();
  const priorityColors = {
    high: 'bg-red-100 text-red-800',
    medium: 'bg-yellow-100 text-yellow-800',
    low: 'bg-green-100 text-green-800',
  };

  return (
    <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow mb-2">
      <div className="flex items-center">
        <input
          type="checkbox"
          checked={task.completed}
          onChange={() => updateTask(task.id, { completed: !task.completed })}
          className="h-5 w-5 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500"
        />
        <span className={`ml-3 ${task.completed ? 'line-through text-gray-400' : 'text-gray-800'}`}>
          {task.title}
        </span>
        {task.priority && (
          <span className={`ml-2 px-2 py-1 text-xs rounded-full ${priorityColors[task.priority]}`}>
            {task.priority}
          </span>
        )}
      </div>
      {task.dueDate && (
        <span className="text-sm text-gray-500">
          {new Date(task.dueDate).toLocaleDateString()}
        </span>
      )}
    </div>
  );
};

const ProjectCard = ({ project }: { project: Project }) => (
  <div className="bg-white rounded-lg shadow p-6">
    <div className="flex items-center justify-between">
      <h3 className="text-lg font-medium">{project.name}</h3>
      <div className="flex -space-x-2">
        <span className="w-2 h-2 rounded-full" style={{ backgroundColor: project.color }} />
      </div>
    </div>
    {project.description && (
      <p className="mt-2 text-gray-600 text-sm">{project.description}</p>
    )}
  </div>
);

const GoalItem = ({ goal }: { goal: Goal }) => (
  <div className="bg-white rounded-lg shadow p-6">
    <div className="flex items-center justify-between">
      <h3 className="text-lg font-medium">{goal.title}</h3>
      <span className="text-sm text-gray-500">
        {goal.progress}%
      </span>
    </div>
    <div className="mt-2 w-full bg-gray-200 rounded-full h-2.5">
      <div 
        className="bg-blue-600 h-2.5 rounded-full" 
        style={{ width: `${goal.progress}%` }}
      />
    </div>
    {goal.targetDate && (
      <p className="mt-2 text-sm text-gray-500">
        Target: {new Date(goal.targetDate).toLocaleDateString()}
      </p>
    )}
  </div>
);

export default function Home() {
  const { 
    tasks, 
    projects, 
    reminders, 
    goals, 
    addTask: addTaskToContext,
    updateTask,
    updateReminder,
    deleteReminder: deleteReminderFromContext,
    addProject
  } = useAppContext();

  const [activeTab, setActiveTab] = useState('tasks');
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [newTaskName, setNewTaskName] = useState('');
  const [taskDescription, setTaskDescription] = useState('');
  const [selectedPriority, setSelectedPriority] = useState<Priority>('medium');

  
  // Get counts for the stats cards
  const stats = [
    {
      title: 'Tasks',
      value: tasks.length,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
      ),
      color: 'bg-blue-500',
    },
    {
      title: 'Projects',
      value: projects.length,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
        </svg>
      ),
      color: 'bg-purple-500',
    },
    {
      title: 'Reminders',
      value: reminders.length,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      ),
      color: 'bg-yellow-500',
    },
    {
      title: 'Goals',
      value: goals.length,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      ),
      color: 'bg-green-500',
    },
  ];

  // Handle task submission
  const handleAddTask = (e?: React.FormEvent) => {
    e?.preventDefault();
    if (newTaskName.trim()) {
      addTaskToContext({
        title: newTaskName,
        description: taskDescription,
        priority: selectedPriority
      });
      
      // Reset form
      setNewTaskName('');
      setTaskDescription('');
      setSelectedPriority('medium');
      setShowTaskForm(false);
    }
  };

  // Handle form submission with Enter key
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleAddTask();
    }
  };
  

  // Toggle task completion
  const toggleTaskCompletion = (taskId: string) => {
    const task = tasks.find(t => t.id === taskId);
    if (task) {
      updateTask(taskId, { 
        ...task,
        completed: !task.completed
      });
    }
  };
  

  // Get tasks by status
  const todoTasks = tasks.filter((task: Task) => !task.completed);
  const completedTasks = tasks.filter((task: Task) => task.completed);
  
  // Get priority color
  const getPriorityColor = (priority: Priority) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const handleToggleTaskCompletion = (taskId: string) => {
    const task = tasks.find(t => t.id === taskId);
    if (task) {
      updateTask(taskId, { completed: !task.completed });
    }
  };

  const handleToggleReminderCompletion = (reminderId: string) => {
    const reminder = reminders.find(r => r.id === reminderId);
    if (reminder) {
      updateReminder(reminderId, { completed: !reminder.completed });
    }
  };

  const handleDeleteReminder = (reminderId: string) => {
    deleteReminderFromContext(reminderId);
  };

  return (
    <div className="bg-gray-50 min-h-screen relative">
      {/* Grid background pattern with fade - starts at absolute top */}
      <div className="absolute inset-0 top-0">
        <div 
          className="w-full"
          style={{
            height: '280px',
            backgroundImage: 'linear-gradient(to right, #9ca3af 1px, transparent 1px), linear-gradient(to bottom, #9ca3af 1px, transparent 1px)',
            backgroundSize: '40px 40px',
            maskImage: 'linear-gradient(to bottom, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.2) 30%, rgba(0,0,0,0.05) 70%, transparent 90%)',
            WebkitMaskImage: 'linear-gradient(to bottom, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.2) 30%, rgba(0,0,0,0.05) 70%, transparent 90%)'
          }}
        ></div>
      </div>

      <div className="px-8 pt-8 pb-8 relative">
        {/* Dashboard Header Section */}
        <div className="relative pb-8">
          <div className="flex items-end justify-between">
            {/* Left side - Date and Greeting */}
            <div>
              <p className="text-sm text-gray-500 mb-6 mt-4">Mon, July 7</p>
              <div className="space-y-1">
                <h1 className="text-4xl text-gray-800 leading-tight" style={{fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif'}}>Hello, Keira</h1>
                <div className="flex items-center">
                  <p className="text-4xl bg-gradient-to-r from-teal-400 to-blue-500 bg-clip-text text-transparent leading-tight" style={{fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif'}}>
                    How can I help you today?
                  </p>
                </div>
              </div>
            </div>

            {/* Right side - Action Buttons aligned with second line */}
            <div className="flex items-center space-x-4 mb-1">
              {/* Ask AI button - filled gradient pill */}
              <Link 
                href="/chat"
                className="h-10 px-5 text-white text-sm font-medium rounded-full hover:opacity-90 transition-all flex items-center justify-center" 
                style={{background: 'linear-gradient(to right, #766de0, #7d73e7, #bcb4ee)'}}
              >
                Ask AI
              </Link>

              {/* Outlined gradient border pills */}
              <Link 
                href="/tasks"
                className="h-10 rounded-full bg-gradient-to-r from-blue-500 to-teal-500 p-0.5"
              >
                <div className="h-full px-5 bg-gray-50 hover:bg-white/10 text-black text-sm font-medium rounded-full transition-all flex items-center justify-center whitespace-nowrap">
                  Get tasks updates
                </div>
              </Link>

              <Link 
                href="/workspace/new"
                className="h-10 rounded-full bg-gradient-to-r from-blue-500 to-teal-500 p-0.5"
              >
                <div className="h-full px-5 bg-gray-50 hover:bg-white/10 text-black text-sm font-medium rounded-full transition-all flex items-center justify-center whitespace-nowrap">
                  Create workspace
                </div>
              </Link>

              <Link 
                href="/settings/integrations"
                className="h-10 rounded-full bg-gradient-to-r from-blue-500 to-teal-500 p-0.5"
              >
                <div className="h-full px-5 bg-gray-50 hover:bg-white/10 text-black text-sm font-medium rounded-full transition-all flex items-center justify-center whitespace-nowrap">
                  Connect apps
                </div>
              </Link>
            </div>
          </div>
        </div>

        {/* Dashboard Widget Grid - 2 Column layout */}
        <div className="grid grid-cols-2 gap-6">
          {/* Left Column - My Tasks Widget */}
          <div className="space-y-6">
            <div className="bg-white rounded-lg p-6 border border-gray-200">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round" style={{color: '#837acb'}}>
                  <rect x="8" y="2" width="8" height="4" rx="1" ry="1"/>
                  <path d="m16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/>
                </svg>
                <h2 className="text-lg text-gray-800" style={{fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif'}}>My Tasks</h2>
              </div>
              <div className="flex items-center gap-2">
                <button className="text-gray-600 hover:text-gray-800">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="12" y1="5" x2="12" y2="19"/>
                    <line x1="5" y1="12" x2="19" y2="12"/>
                  </svg>
                </button>
                <Link href="/tasks/board" className="text-gray-600 hover:text-gray-800">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0V0m0 4h4M6 21l4-4H6l4-4" />
                  </svg>
                </Link>
                <Link href="/tasks/settings" className="text-gray-600 hover:text-gray-800">
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                  </svg>
                </Link>
              </div>
            </div>

            {/* IN PROGRESS Section */}
            <div className="mb-6">
              <div className="flex items-center gap-2 mb-3">
                <button className="text-gray-600">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
                <span className="text-black text-xs font-medium px-2 py-1 rounded" style={{backgroundColor: '#ace8eb'}}>IN PROGRESS</span>
                <span className="text-sm text-gray-600">• {tasks.filter(task => !task.completed).length} tasks</span>
              </div>

              {/* Column Headers */}
              <div className="flex text-xs text-gray-500 mb-2 px-4">
                <div className="flex-1">Name</div>
                <div className="w-20 text-center">Priority</div>
                <div className="w-24 text-right">Due date</div>
              </div>

              {/* Task List */}
              <div className="space-y-2">
                {tasks.filter(t => !t.completed).length > 0 ? (
                  tasks.filter(t => !t.completed).map((task) => (
                    <div key={task.id} className="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200">
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          checked={task.completed}
                          onChange={() => updateTask(task.id, { completed: !task.completed })}
                          className="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                        />
                        <span className="ml-3 text-sm font-medium text-gray-900">{task.title}</span>
                        {task.priority && (
                          <span className={`ml-2 px-2 py-0.5 text-xs rounded-full ${
                            task.priority === 'high' ? 'bg-red-100 text-red-800' :
                            task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {task.priority}
                          </span>
                        )}
                      </div>
                      {task.dueDate && (
                        <span className="text-xs text-gray-500">
                          {formatDate(task.dueDate)}
                        </span>
                      )}
                    </div>
                  ))
                ) : (
                  <p className="text-sm text-gray-500 text-center py-4">No tasks yet. Add one to get started!</p>
                )}
              </div>
              </div>
            </div>

            {/* Task Items */}
            <div className="divide-y divide-gray-100">
              {todoTasks.map((task) => (
                <div key={task.id} className="group flex items-center gap-3 p-3 hover:bg-gray-50 rounded-md">
                  <button 
                    onClick={() => toggleTaskCompletion(task.id)}
                    className={`flex-shrink-0 h-5 w-5 rounded-full border-2 ${task.completed ? 'bg-blue-500 border-blue-500 flex items-center justify-center' : 'border-gray-300'}`}
                    aria-label={task.completed ? 'Mark as incomplete' : 'Mark as complete'}
                  >
                    {task.completed && (
                      <svg className="h-3.5 w-3.5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                      </svg>
                    )}
                  </button>
                  
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center">
                      <span className={`text-sm truncate ${task.completed ? 'line-through text-gray-400' : 'text-gray-900'}`}>
                        {task.title}
                      </span>
                      {task.projectId && (
                        <span className="ml-2 px-2 py-0.5 text-xs rounded-full bg-gray-100 text-gray-600">
                          {projects.find(p => p.id === task.projectId)?.name || 'Project'}
                        </span>
                      )}
                    </div>
                    {task.description && (
                      <p className="mt-1 text-xs text-gray-500 truncate">{task.description}</p>
                    )}
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    {task.dueDate && (
                      <span className={`text-xs px-2 py-1 rounded ${isToday(new Date(task.dueDate)) ? 'bg-red-50 text-red-600' : 'bg-gray-50 text-gray-600'}`}>
                        {formatDate(task.dueDate)}
                      </span>
                    )}
                    <span className={`text-xs px-2 py-1 rounded-full ${getPriorityColor(task.priority || 'medium')}`}>
                      {task.priority ? task.priority.charAt(0).toUpperCase() + task.priority.slice(1) : 'No priority'}
                    </span>
                    <button className="opacity-0 group-hover:opacity-100 text-gray-400 hover:text-gray-600">
                      <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                      </svg>
                    </button>
                  </div>
                  </div>
                ))}
              </div>

              {/* Add task form */}
              <div className="border-t border-gray-100">
                {!showTaskForm ? (
                  <button 
                    onClick={() => setShowTaskForm(true)}
                    className="flex items-center gap-2 p-3 text-sm text-gray-600 hover:text-gray-800 w-full text-left group"
                  >
                    <span className="flex-shrink-0 h-5 w-5 rounded-full border-2 border-dashed border-gray-300 flex items-center justify-center text-gray-400 group-hover:border-blue-500 group-hover:text-blue-500 transition-colors">
                      <svg className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    </span>
                    <span>Add task</span>
                  </button>
                ) : (
                  <div className="p-4 space-y-3 bg-white rounded-lg border border-gray-200 shadow-sm">
                    <div className="space-y-3">
                      <input
                        type="text"
                        value={newTaskName}
                        onChange={(e) => setNewTaskName(e.target.value)}
                        placeholder="Task name"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        autoFocus
                      />
                      
                      <textarea
                        value={taskDescription}
                        onChange={(e) => setTaskDescription(e.target.value)}
                        placeholder="Description (optional)"
                        rows={2}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      
                      <div className="flex flex-wrap gap-2">
                        </div>
                        
                        
                      </div>
                      
                      <div className="flex justify-between items-center pt-2">
                        <div className="flex space-x-2">
                          <button
                            onClick={handleAddTask}
                            className="px-3 py-1.5 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                          >
                            Add Task
                          </button>
                          <button
                            onClick={() => {
                              setShowTaskForm(false);
                              setNewTaskName('');
                              setTaskDescription('');
                              setSelectedPriority('medium');
                            }}
                            className="px-3 py-1.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                          >
                            Cancel
                          </button>
                        </div>
                        <button
                          type="button"
                          className="p-1 text-gray-400 hover:text-gray-500"
                          onClick={handleAddTask}
                        >
                          <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* TO DO Section */}
            <div className="mb-4">
              <div className="flex items-center gap-2 mb-3">
                <button className="text-gray-600">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                  </svg>
                </button>
                <span className="text-black text-xs font-medium px-2 py-1 rounded" style={{backgroundColor: '#f4f6f8'}}>TO DO</span>
                <span className="text-sm text-gray-600">• {tasks.filter(task => !task.completed).length} task{tasks.filter(task => !task.completed).length !== 1 ? 's' : ''}</span>
              </div>
            </div>

            {/* UPCOMING Section */}
            <div>
              <div className="flex items-center gap-2">
                <button className="text-gray-600">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                  </svg>
                </button>
                <span className="text-black text-xs font-medium px-2 py-1 rounded" style={{backgroundColor: '#f8d4ae'}}>UPCOMING</span>
                <span className="text-sm text-gray-600">• {tasks.filter(task => task.dueDate && new Date(task.dueDate) > new Date()).length} task{tasks.filter(task => task.dueDate && new Date(task.dueDate) > new Date()).length !== 1 ? 's' : ''}</span>
              </div>
            </div>
            </div>
          </div>
          
          {/* My Goals Widget - moved to left column */}
          <div className="bg-white rounded-lg p-6 border border-gray-200">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round" style={{color: '#837acb'}}>
                    <circle cx="12" cy="12" r="10"/>
                    <circle cx="12" cy="12" r="6"/>
                    <circle cx="12" cy="12" r="2"/>
                  </svg>
                  <h2 className="text-lg text-gray-800" style={{fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif'}}>My Goals</h2>
                </div>
                <button className="text-gray-600 hover:text-gray-800">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="12" y1="5" x2="12" y2="19"/>
                    <line x1="5" y1="12" x2="19" y2="12"/>
                  </svg>
                </button>
              </div>
              
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm text-gray-800">Check Emails and Messages</span>
                    <div className="flex items-center gap-3">
                      <div className="w-20 bg-gray-200 rounded-md h-2">
                        <div className="h-2 rounded-md" style={{width: '73%', backgroundColor: '#31d3cb'}}></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900">73%</span>
                    </div>
                  </div>
                  <div className="text-xs text-gray-500">Product launch • My Projects</div>
                </div>
                
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm text-gray-800">Prepare a brief status update to the client</span>
                    <div className="flex items-center gap-3">
                      <div className="w-20 bg-gray-200 rounded-md h-2">
                        <div className="h-2 rounded-md" style={{width: '11%', backgroundColor: '#f8ac67'}}></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900">11%</span>
                    </div>
                  </div>
                  <div className="text-xs text-gray-500">Product launch • My Projects</div>
                </div>
                
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm text-gray-800">Update project documentation</span>
                    <div className="flex items-center gap-3">
                      <div className="w-20 bg-gray-200 rounded-md h-2">
                        <div className="h-2 rounded-md" style={{width: '63%', backgroundColor: '#31d3cb'}}></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900">63%</span>
                    </div>
                  </div>
                  <div className="text-xs text-gray-500">Team brainstorm • My Projects</div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Projects and Calendar */}
          <div className="space-y-6">
            {/* Projects Widget */}
            <div className="bg-white rounded-lg p-6 border border-gray-200">
              <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round" style={{color: '#837acb'}}>
                  <path d="M20 7H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2Z"/>
                  <path d="M8 7V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
                </svg>
                <h2 className="text-lg text-gray-800" style={{fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif'}}>Projects</h2>
              </div>
                <button className="text-sm text-gray-600 hover:text-gray-800 flex items-center gap-1">
                  <span>Recents</span>
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
              
              <div className="grid grid-cols-2 gap-3">
                {/* Create new project card */}
                <button 
                  onClick={() => alert('Create new project feature coming soon!')}
                  className="p-3 rounded-lg border-2 border-dashed border-gray-200 hover:bg-gray-50 min-h-[60px]"
                >
                  <div className="flex items-center gap-3 h-full">
                    <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center flex-shrink-0">
                      <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                        <line x1="12" y1="5" x2="12" y2="19"/>
                        <line x1="5" y1="12" x2="19" y2="12"/>
                      </svg>
                    </div>
                    <div className="flex-1">
                      <h3 className="text-sm text-gray-600 font-medium">Create new project</h3>
                    </div>
                  </div>
                </button>

                {/* Product launch */}
                <button 
                  onClick={() => alert('Viewing Product launch project...')}
                  className="p-3 rounded-lg border border-gray-200 hover:bg-gray-50 min-h-[60px] text-left"
                >
                  <div className="flex items-start gap-3">
                    <div className="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0" style={{backgroundColor: '#f3e4ff'}}>
                      <div className="w-5 h-5 rounded transform rotate-45" style={{backgroundColor: '#9223c6'}}></div>
                    </div>
                    <div className="flex-1">
                      <h3 className="text-sm text-gray-900 font-medium mb-1">Product launch</h3>
                      <p className="text-xs text-gray-500">6 tasks • 12 teammates</p>
                    </div>
                  </div>
                </button>

                {/* Team brainstorm */}
                <button 
                  onClick={() => alert('Viewing Team brainstorm project...')}
                  className="p-3 rounded-lg border border-gray-200 hover:bg-gray-50 min-h-[60px] text-left"
                >
                  <div className="flex items-start gap-3">
                    <div className="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0" style={{backgroundColor: '#eae8ff'}}>
                      <div className="w-5 h-5 rounded transform rotate-45" style={{backgroundColor: '#242ac9'}}></div>
                    </div>
                    <div className="flex-1">
                      <h3 className="text-sm text-gray-900 font-medium mb-1">Team brainstorm</h3>
                      <p className="text-xs text-gray-500">2 tasks • 32 teammates</p>
                    </div>
                  </div>
                </button>

                {/* Branding launch */}
                <button 
                  onClick={() => alert('Viewing Branding launch project...')}
                  className="p-3 rounded-lg border border-gray-200 hover:bg-gray-50 min-h-[60px] text-left"
                >
                  <div className="flex items-start gap-3">
                    <div className="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0" style={{backgroundColor: '#dcf1fa'}}>
                      <div className="w-5 h-5 rounded transform rotate-45" style={{backgroundColor: '#21b6c8'}}></div>
                    </div>
                    <div className="flex-1">
                      <h3 className="text-sm text-gray-900 font-medium mb-1">Branding launch</h3>
                      <p className="text-xs text-gray-500">4 tasks • 9 teammates</p>
                    </div>
                  </div>
                </button>
              </div>
            </div>

            {/* Calendar Widget */}
            <div className="bg-white rounded-lg p-6 border border-gray-200">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round" style={{color: '#837acb'}}>
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                    <line x1="16" y1="2" x2="16" y2="6"/>
                    <line x1="8" y1="2" x2="8" y2="6"/>
                    <line x1="3" y1="10" x2="21" y2="10"/>
                  </svg>
                  <h2 className="text-lg font-medium text-gray-900">Calendar</h2>
                </div>
                <div className="flex items-center gap-1">
                  <span className="text-sm text-gray-700">July</span>
                  <svg className="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </div>
              </div>

              {/* Week navigation */}
              <div className="flex items-center justify-between mb-6">
                <button className="p-1 hover:bg-gray-100 rounded">
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                    <polyline points="15,18 9,12 15,6"/>
                  </svg>
                </button>
                
                <div className="flex items-center gap-2">
                  {[
                    { day: 'Fri', date: '04' },
                    { day: 'Sat', date: '05' },
                    { day: 'Sun', date: '06' },
                    { day: 'Mon', date: '07', isToday: true },
                    { day: 'Tue', date: '08' },
                    { day: 'Wed', date: '09' },
                    { day: 'Thu', date: '10' }
                  ].map((dayInfo, index) => (
                    <div key={index} className="text-center">
                      <div className="text-xs text-gray-500 mb-1">{dayInfo.day}</div>
                      <button className={`px-3 py-2 text-sm rounded-lg ${
                        dayInfo.isToday 
                          ? 'text-white font-medium' 
                          : 'text-gray-700 hover:bg-gray-100'
                      }`} style={dayInfo.isToday ? {backgroundColor: '#736edd'} : {}}>
                        {dayInfo.date}
                      </button>
                    </div>
                  ))}
                </div>

                <button className="p-1 hover:bg-gray-100 rounded">
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                    <polyline points="9,18 15,12 9,6"/>
                  </svg>
                </button>
              </div>

              {/* Meeting Event */}
              <div className="rounded-lg p-4" style={{backgroundColor: '#f5f6ff'}}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="text-sm font-medium text-gray-900 mb-1">Meeting with VP</h3>
                    <p className="text-xs text-gray-500">Today • 10:00 - 11:00 am</p>
                    
                    <div className="flex items-center gap-2 mt-3">
                      <div className="flex items-center gap-1 bg-white px-2 py-1 rounded-full border border-gray-200">
                        <span className="text-xs text-gray-700">Google Meet</span>
                      </div>
                      
                      <div className="flex -space-x-1 ml-auto">
                        <div className="w-6 h-6 bg-orange-400 rounded-full border-2 border-white"></div>
                        <div className="w-6 h-6 bg-blue-500 rounded-full border-2 border-white"></div>
                        <div className="w-6 h-6 bg-gray-400 rounded-full border-2 border-white"></div>
                        <div className="w-6 h-6 bg-red-400 rounded-full border-2 border-white"></div>
                        <div className="w-6 h-6 bg-purple-600 text-white text-xs rounded-full border-2 border-white flex items-center justify-center font-medium">
                          +2
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <button className="text-gray-400 hover:text-gray-600 ml-4">
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            {/* Reminders Widget */}
            <div className="bg-white rounded-lg p-6 border border-gray-200">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round" style={{color: '#837acb'}}>
                    <circle cx="12" cy="12" r="10"/>
                    <polyline points="12,6 12,12 16,14"/>
                  </svg>
                  <h2 className="text-lg font-medium text-gray-900">Reminders</h2>
                </div>
              </div>

              {/* Today Section */}
              <div className="mb-4">
                <div className="flex items-center gap-2 mb-3">
                  <button className="text-gray-600">
                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </button>
                  <span className="text-sm font-medium text-gray-900">Today</span>
                  <span className="text-sm text-gray-500">• {reminders.length}</span>
                </div>

                {/* Reminder Items */}
                <div className="divide-y divide-gray-100">
                  {reminders.map((reminder) => (
                    <div key={reminder.id} className="flex items-start justify-between py-4 hover:bg-gray-50 rounded-lg">
                      <div className="flex-1 pr-4">
                        <p className={`text-sm ${reminder.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                          {reminder.title}
                        </p>
                      </div>
                      <div className="flex items-center gap-4">
                        <button 
                          onClick={() => alert('Reminder notification sent!')}
                          className="text-black hover:text-gray-600 p-1"
                          title="Send notification"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9"/>
                            <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0"/>
                          </svg>
                        </button>
                        <button 
                          onClick={() => deleteReminderFromContext(reminder.id)}
                          className="text-black hover:text-red-500 p-1"
                          title="Delete reminder"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                            <polyline points="3,6 5,6 21,6"/>
                            <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6m5 0V4a2 2 0 0 1 2-2h0a2 2 0 0 1 2 2v2"/>
                          </svg>
                        </button>
                        <button 
                          onClick={() => handleToggleReminderCompletion(reminder.id)}
                          className="text-black hover:text-green-500 p-1"
                          title="Mark as complete"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24" strokeLinecap="round" strokeLinejoin="round">
                            <circle cx="12" cy="12" r="10"/>
                            <polyline points="9,12 12,15 16,9"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
        </div>
      </div>
    </div>
  );
}
